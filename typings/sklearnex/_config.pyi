"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager

def get_config(): # -> dict[str, Any]:
    """Retrieve current values for configuration set by :func:`set_config`.

    Returns
    -------
    config : dict
        Keys are parameter names that can be passed to :func:`set_config`.

    See Also
    --------
    config_context : Context manager for global configuration.
    set_config : Set global configuration.
    """
    ...

def set_config(target_offload=..., allow_fallback_to_host=..., allow_sklearn_after_onedal=..., use_raw_input=..., **sklearn_configs): # -> None:
    """Set global configuration.

    Parameters
    ----------
    target_offload : str or SyclQueue or None, default=None
        The device primarily used to perform computations.
        If string, expected to be "auto" (the execution context
        is deduced from input data location),
        or SYCL* filter selector string. Global default: "auto".

    allow_fallback_to_host : bool or None, default=None
        If True, allows to fallback computation to host device
        in case particular estimator does not support the selected one.
        Global default: False.

    allow_sklearn_after_onedal : bool or None, default=None
        If True, allows to fallback computation to sklearn after onedal
        backend in case of runtime error on onedal backend computations.
        Global default: True.

    use_raw_input : bool or None, default=None
        If True, uses the raw input data in some SPMD onedal backend computations
        without any checks on data consistency or validity.
        Not recommended for general use.
        Global default: False.

        .. deprecated:: 2026.0

    **sklearn_configs : kwargs
        Scikit-learn configuration settings dependent on the installed version
        of scikit-learn.

    See Also
    --------
    config_context : Context manager for global configuration.
    get_config : Retrieve current values of the global configuration.

    Warnings
    --------
    Using ``use_raw_input=True`` is not recommended for general use as it
    bypasses data consistency checks, which may lead to unexpected behavior.

    Use of ``target_offload`` requires the DPC++ backend. Setting a
    non-default value (e.g ``cpu`` or ``gpu``) without this backend active
    will raise an error.
    """
    ...

@contextmanager
def config_context(**new_config): # -> Generator[None, Any, None]:
    """Context manager for global scikit-learn configuration.

    Parameters
    ----------
    target_offload : str or SyclQueue or None, default=None
        The device primarily used to perform computations.
        If string, expected to be "auto" (the execution context
        is deduced from input data location),
        or SYCL* filter selector string. Global default: "auto".

    allow_fallback_to_host : bool or None, default=None
        If True, allows to fallback computation to host device
        in case particular estimator does not support the selected one.
        Global default: False.

    allow_sklearn_after_onedal : bool or None, default=None
        If True, allows to fallback computation to sklearn after onedal
        backend in case of runtime error on onedal backend computations.
        Global default: True.

    use_raw_input : bool or None, default=None
        .. deprecated:: 2026.0
        If True, uses the raw input data in some SPMD onedal backend computations
        without any checks on data consistency or validity.
        Not recommended for general use.
        Global default: False.

    Notes
    -----
    All settings, not just those presently modified, will be returned to
    their previous values when the context manager is exited.

    See Also
    --------
    set_config : Set global scikit-learn configuration.
    get_config : Retrieve current values of the global configuration.

    Warnings
    --------
    Using ``use_raw_input=True`` is not recommended for general use as it
    bypasses data consistency checks, which may lead to unexpected behavior.
    """
    ...

