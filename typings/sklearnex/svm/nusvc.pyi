"""
This type stub file was generated by pyright.
"""

from functools import wraps
from sklearn.svm import NuSVC as _sklearn_NuSVC
from sklearn.utils.metaestimators import available_if
from sklearn.utils.validation import _deprecate_positional_args
from daal4py.sklearn._n_jobs_support import control_n_jobs
from daal4py.sklearn._utils import sklearn_check_version
from .._device_offload import wrap_output_data
from ._common import BaseSVC

@control_n_jobs(decorated_methods=["fit", "predict", "_predict_proba", "decision_function", "score"])
class NuSVC(BaseSVC, _sklearn_NuSVC):
    __doc__ = ...
    if sklearn_check_version("1.2"):
        _parameter_constraints: dict = ...
    @_deprecate_positional_args
    def __init__(self, *, nu=..., kernel=..., degree=..., gamma=..., coef0=..., shrinking=..., probability=..., tol=..., cache_size=..., class_weight=..., verbose=..., max_iter=..., decision_function_shape=..., break_ties=..., random_state=...) -> None:
        ...
    
    def fit(self, X, y, sample_weight=...): # -> Self:
        ...
    
    @wrap_output_data
    def predict(self, X): # -> Any:
        ...
    
    @wrap_output_data
    def score(self, X, y, sample_weight=...): # -> Any:
        ...
    
    @available_if(_sklearn_NuSVC._check_proba)
    @wraps(_sklearn_NuSVC.predict_proba, assigned=["__doc__"])
    def predict_proba(self, X):
        ...
    
    @available_if(_sklearn_NuSVC._check_proba)
    @wraps(_sklearn_NuSVC.predict_log_proba, assigned=["__doc__"])
    def predict_log_proba(self, X): # -> dpnp_array | Any:
        ...
    
    @wrap_output_data
    def decision_function(self, X): # -> Any:
        ...
    


