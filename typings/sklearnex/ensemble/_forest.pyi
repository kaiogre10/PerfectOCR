"""
This type stub file was generated by pyright.
"""

from abc import ABC
from sklearn.ensemble._forest import ForestClassifier as _sklearn_ForestClassifier, ForestRegressor as _sklearn_ForestRegressor
from daal4py.sklearn._n_jobs_support import control_n_jobs
from daal4py.sklearn._utils import sklearn_check_version
from onedal.ensemble import ExtraTreesClassifier as onedal_ExtraTreesClassifier, ExtraTreesRegressor as onedal_ExtraTreesRegressor, RandomForestClassifier as onedal_RandomForestClassifier, RandomForestRegressor as onedal_RandomForestRegressor
from sklearnex import get_hyperparameters
from sklearnex._utils import register_hyperparameters
from .._device_offload import wrap_output_data
from ..base import oneDALEstimator

if sklearn_check_version("1.2"):
    ...
if sklearn_check_version("1.4"):
    ...
class BaseForest(oneDALEstimator, ABC):
    _onedal_factory = ...
    @property
    def estimators_(self): # -> list[Any] | None:
        ...
    
    @estimators_.setter
    def estimators_(self, estimators): # -> None:
        ...
    
    if not sklearn_check_version("1.2"):
        @property
        def base_estimator(self):
            ...
        
        @base_estimator.setter
        def base_estimator(self, estimator): # -> None:
            ...
        


class ForestClassifier(BaseForest, _sklearn_ForestClassifier):
    _err = ...
    _get_tree_state = ...
    def __init__(self, estimator, n_estimators=..., *, estimator_params=..., bootstrap=..., oob_score=..., n_jobs=..., random_state=..., verbose=..., warm_start=..., class_weight=..., max_samples=...) -> None:
        ...
    
    def fit(self, X, y, sample_weight=...): # -> Self:
        ...
    
    @wrap_output_data
    def predict(self, X): # -> Any:
        ...
    
    @wrap_output_data
    def predict_proba(self, X): # -> Any:
        ...
    
    def predict_log_proba(self, X): # -> dpnp_array | Any:
        ...
    
    @wrap_output_data
    def score(self, X, y, sample_weight=...): # -> Any:
        ...
    


class ForestRegressor(BaseForest, _sklearn_ForestRegressor):
    _err = ...
    _get_tree_state = ...
    def __init__(self, estimator, n_estimators=..., *, estimator_params=..., bootstrap=..., oob_score=..., n_jobs=..., random_state=..., verbose=..., warm_start=..., max_samples=...) -> None:
        ...
    
    def fit(self, X, y, sample_weight=...): # -> Self:
        ...
    
    @wrap_output_data
    def predict(self, X): # -> Any:
        ...
    
    @wrap_output_data
    def score(self, X, y, sample_weight=...): # -> Any:
        ...
    


@register_hyperparameters({ "infer": get_hyperparameters("decision_forest", "infer") })
@control_n_jobs(decorated_methods=["fit", "predict", "predict_proba", "score"])
class RandomForestClassifier(ForestClassifier):
    __doc__ = ...
    _onedal_factory = onedal_RandomForestClassifier
    if sklearn_check_version("1.2"):
        _parameter_constraints: dict = ...
    if sklearn_check_version("1.4"):
        def __init__(self, n_estimators=..., *, criterion=..., max_depth=..., min_samples_split=..., min_samples_leaf=..., min_weight_fraction_leaf=..., max_features=..., max_leaf_nodes=..., min_impurity_decrease=..., bootstrap=..., oob_score=..., n_jobs=..., random_state=..., verbose=..., warm_start=..., class_weight=..., ccp_alpha=..., max_samples=..., monotonic_cst=..., max_bins=..., min_bin_size=...) -> None:
            ...
        
    else:
        def __init__(self, n_estimators=..., *, criterion=..., max_depth=..., min_samples_split=..., min_samples_leaf=..., min_weight_fraction_leaf=..., max_features=..., max_leaf_nodes=..., min_impurity_decrease=..., bootstrap=..., oob_score=..., n_jobs=..., random_state=..., verbose=..., warm_start=..., class_weight=..., ccp_alpha=..., max_samples=..., max_bins=..., min_bin_size=...) -> None:
            ...
        


@control_n_jobs(decorated_methods=["fit", "predict", "score"])
class RandomForestRegressor(ForestRegressor):
    __doc__ = ...
    _onedal_factory = onedal_RandomForestRegressor
    if sklearn_check_version("1.2"):
        _parameter_constraints: dict = ...
    if sklearn_check_version("1.4"):
        def __init__(self, n_estimators=..., *, criterion=..., max_depth=..., min_samples_split=..., min_samples_leaf=..., min_weight_fraction_leaf=..., max_features=..., max_leaf_nodes=..., min_impurity_decrease=..., bootstrap=..., oob_score=..., n_jobs=..., random_state=..., verbose=..., warm_start=..., ccp_alpha=..., max_samples=..., monotonic_cst=..., max_bins=..., min_bin_size=...) -> None:
            ...
        
    else:
        def __init__(self, n_estimators=..., *, criterion=..., max_depth=..., min_samples_split=..., min_samples_leaf=..., min_weight_fraction_leaf=..., max_features=..., max_leaf_nodes=..., min_impurity_decrease=..., bootstrap=..., oob_score=..., n_jobs=..., random_state=..., verbose=..., warm_start=..., ccp_alpha=..., max_samples=..., max_bins=..., min_bin_size=...) -> None:
            ...
        


@control_n_jobs(decorated_methods=["fit", "predict", "predict_proba", "score"])
class ExtraTreesClassifier(ForestClassifier):
    __doc__ = ...
    _onedal_factory = onedal_ExtraTreesClassifier
    if sklearn_check_version("1.2"):
        _parameter_constraints: dict = ...
    if sklearn_check_version("1.4"):
        def __init__(self, n_estimators=..., *, criterion=..., max_depth=..., min_samples_split=..., min_samples_leaf=..., min_weight_fraction_leaf=..., max_features=..., max_leaf_nodes=..., min_impurity_decrease=..., bootstrap=..., oob_score=..., n_jobs=..., random_state=..., verbose=..., warm_start=..., class_weight=..., ccp_alpha=..., max_samples=..., monotonic_cst=..., max_bins=..., min_bin_size=...) -> None:
            ...
        
    else:
        def __init__(self, n_estimators=..., *, criterion=..., max_depth=..., min_samples_split=..., min_samples_leaf=..., min_weight_fraction_leaf=..., max_features=..., max_leaf_nodes=..., min_impurity_decrease=..., bootstrap=..., oob_score=..., n_jobs=..., random_state=..., verbose=..., warm_start=..., class_weight=..., ccp_alpha=..., max_samples=..., max_bins=..., min_bin_size=...) -> None:
            ...
        


@control_n_jobs(decorated_methods=["fit", "predict", "score"])
class ExtraTreesRegressor(ForestRegressor):
    __doc__ = ...
    _onedal_factory = onedal_ExtraTreesRegressor
    if sklearn_check_version("1.2"):
        _parameter_constraints: dict = ...
    if sklearn_check_version("1.4"):
        def __init__(self, n_estimators=..., *, criterion=..., max_depth=..., min_samples_split=..., min_samples_leaf=..., min_weight_fraction_leaf=..., max_features=..., max_leaf_nodes=..., min_impurity_decrease=..., bootstrap=..., oob_score=..., n_jobs=..., random_state=..., verbose=..., warm_start=..., ccp_alpha=..., max_samples=..., monotonic_cst=..., max_bins=..., min_bin_size=...) -> None:
            ...
        
    else:
        def __init__(self, n_estimators=..., *, criterion=..., max_depth=..., min_samples_split=..., min_samples_leaf=..., min_weight_fraction_leaf=..., max_features=..., max_leaf_nodes=..., min_impurity_decrease=..., bootstrap=..., oob_score=..., n_jobs=..., random_state=..., verbose=..., warm_start=..., ccp_alpha=..., max_samples=..., max_bins=..., min_bin_size=...) -> None:
            ...
        


