"""
This type stub file was generated by pyright.
"""

from sklearn.base import BaseEstimator
from daal4py.sklearn._n_jobs_support import control_n_jobs
from daal4py.sklearn._utils import sklearn_check_version
from ..base import oneDALEstimator

if sklearn_check_version("1.2"):
    ...
@control_n_jobs(decorated_methods=["fit"])
class BasicStatistics(oneDALEstimator, BaseEstimator):
    """
    Estimator for basic statistics.

    Compute low order moments and related statistics for given data.

    Parameters
    ----------
    result_options : str or list, default=str('all')
        Used to set statistics to calculate. Possible values are ``'min'``, ``'max'``, ``'sum'``, ``'mean'``, ``'variance'``,
        ``'variation'``, ``sum_squares'``, ``sum_squares_centered'``, ``'standard_deviation'``, ``'second_order_raw_moment'``
        or a list containing any of these values. If set to ``'all'`` then all possible statistics will be
        calculated.

    Attributes
    ----------
        min_ : ndarray of shape (n_features,)
            Minimum of each feature over all samples.
        max_ : ndarray of shape (n_features,)
            Maximum of each feature over all samples.
        sum_ : ndarray of shape (n_features,)
            Sum of each feature over all samples.
        mean_ : ndarray of shape (n_features,)
            Mean of each feature over all samples.
        variance_ : ndarray of shape (n_features,)
            Variance of each feature over all samples. Bessel's correction is used.
        variation_ : ndarray of shape (n_features,)
            Variation of each feature over all samples. Bessel's correction is used.
        sum_squares_ : ndarray of shape (n_features,)
            Sum of squares for each feature over all samples.
        standard_deviation_ : ndarray of shape (n_features,)
            Unbiased standard deviation of each feature over all samples. Bessel's correction is used.
        sum_squares_centered_ : ndarray of shape (n_features,)
            Centered sum of squares for each feature over all samples.
        second_order_raw_moment_ : ndarray of shape (n_features,)
            Second order moment of each feature over all samples.

    Notes
    -----
    Attribute exists only if corresponding result option has been provided.

    Names of attributes without the trailing underscore are
    supported currently but deprecated in 2025.1 and will be removed in 2026.0

    Some results can exhibit small variations due to
    floating point error accumulation and multithreading.

    Examples
    --------
    >>> import numpy as np
    >>> from sklearnex.basic_statistics import BasicStatistics
    >>> bs = BasicStatistics(result_options=['sum', 'min', 'max'])
    >>> X = np.array([[1, 2], [3, 4]])
    >>> bs.fit(X)
    >>> bs.sum_
    np.array([4., 6.])
    >>> bs.min_
    np.array([1., 2.])
    """
    def __init__(self, result_options=...) -> None:
        ...
    
    _onedal_basic_statistics = ...
    if sklearn_check_version("1.2"):
        _parameter_constraints: dict = ...
    def __getattr__(self, attr): # -> Any:
        ...
    
    def fit(self, X, y=..., sample_weight=...): # -> Self:
        """Calculate statistics of X.

        Parameters
        ----------
        X : array-like of shape (n_samples, n_features)
            Data for compute, where ``n_samples`` is the number of samples and
            ``n_features`` is the number of features.

        y : Ignored
            Not used, present for API consistency by convention.

        sample_weight : array-like of shape (n_samples,), default=None
            Weights for compute weighted statistics, where ``n_samples`` is the number of samples.

        Returns
        -------
        self : object
            Returns the instance itself.
        """
        ...
    


